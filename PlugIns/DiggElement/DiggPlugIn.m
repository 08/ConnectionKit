//
//  DiggPlugIn.m
//  DiggElement
//
//  Created by Terrence Talbot on 4/9/11.
//  Copyright 2011 Karelia Software. All rights reserved.
//

#import "DiggPlugIn.h"


typedef enum { diggTypePromoted, diggTypeSubmitted, diggTypeUser, diggTypeFriends } diggType;
typedef enum { diggHomepage, diggSubmitted, diggDugg, diggCommented } DiggUserOption;
typedef enum { DiggAllStories, DiggPopularStories, DiggUpcomingStories, DiggTopStories, DiggHotStories } DiggStoryPromotion;


// SVLocalizedString(@"Digg example no.", "String_On_Page_Template - followed by a number")


@interface DiggPlugIn ()
+ (NSString *)diggCategoryString:(NSString *)basis;
+ (NSString *)diggUserOptionString:(DiggUserOption)option;
@end


@implementation DiggPlugIn

//FIXME: we need something for KSContainsObjectValueTransformer, but where are these used?
+ (void)initialize
{
	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

//	// Register value transformers
//	NSSet *comparisonObjects = [NSSet setWithObjects:[NSNumber numberWithInt:diggTypeUser], [NSNumber numberWithInt:diggTypeFriends], nil];
//	NSValueTransformer *transformer = [[KSContainsObjectValueTransformer alloc] initWithComparisonObjects:comparisonObjects];
//	[NSValueTransformer setValueTransformer:transformer forName:@"DiggPageletTypeIsUserOrFriends"];
//	[transformer release];
//	
//	comparisonObjects = [NSSet setWithObjects:[NSNumber numberWithInt:diggTypeSubmitted], [NSNumber numberWithInt:diggTypePromoted], nil];
//	transformer = [[KSContainsObjectValueTransformer alloc] initWithComparisonObjects:comparisonObjects];
//	[NSValueTransformer setValueTransformer:transformer forName:@"DiggPageletTypeIsSubmittedOrPromoted"];
//	[transformer release];
	
	[pool release];
}


#pragma mark SVPlugIn

+ (NSArray *)plugInKeys
{ 
    return [NSArray arrayWithObjects:
            @"diggCategory",
            @"diggCategoryString",
            @"diggCount",
            @"diggDescriptions",
            @"diggStoryPromotion",
            @"diggStoryPromotionString",
            @"diggType",
            @"diggUserOptions",
            @"diggUser",
            @"diggUserOptionString",
            @"maximumStories",
            @"openLinksInNewWindow", 
            nil];
}

- (void)awakeFromNew
{
    self.maximumStories = 10;
}

- (void)pageDidChange:(id <SVPage>)page
{
    self.diggCategoryString = [[self class] diggCategoryString:self.diggCategory];
    self.diggUserOptionString = [[self class] diggUserOptionString:self.diggUserOptions];
}

- (void)dealloc
{
    self.diggCategory = nil;
    self.diggCategoryString = nil;
    self.diggUser = nil;
    self.diggUserOptionString = nil;
    self.diggStoryPromotionString = nil;
    [super dealloc];
}


#pragma mark Migration

- (void)awakeFromSourceProperties:(NSDictionary *)properties
{
    [super awakeFromSourceProperties:properties];
}


#pragma mark HTML Generation

//FIXME: once the script is fixed, we should probably scrap the tempate and write everything here
- (void)writeHTML:(id <SVPlugInContext>)context
{
    [super writeHTML:context];
    
    [context addDependencyForKeyPath:@"diggCategory" ofObject:self];
    [context addDependencyForKeyPath:@"diggCategoryString" ofObject:self];
    [context addDependencyForKeyPath:@"diggCount" ofObject:self];
    [context addDependencyForKeyPath:@"diggDescriptions" ofObject:self];
    [context addDependencyForKeyPath:@"diggStoryPromotion" ofObject:self];
    [context addDependencyForKeyPath:@"diggStoryPromotionString" ofObject:self];
    [context addDependencyForKeyPath:@"diggType" ofObject:self];
    [context addDependencyForKeyPath:@"diggUserOptions" ofObject:self];
    [context addDependencyForKeyPath:@"diggUser" ofObject:self];
    [context addDependencyForKeyPath:@"diggUserOptionString" ofObject:self];
    [context addDependencyForKeyPath:@"maximumStories" ofObject:self];
    [context addDependencyForKeyPath:@"openLinksInNewWindow" ofObject:self];
}

//FIXME: rewrite template or code to use a unique id generated by the system for the <ul>
- (NSString *)uniqueID
{
    return  @"72";
}

//FIXME: #40688: needs to be localized to site's language
+ (NSString *)diggUserOptionString:(DiggUserOption)option
{
	NSArray *types = [NSArray arrayWithObjects:@"popular", @"submissions", @"dugg", @"commented", nil];
	NSString *result = [types objectAtIndex:option];
	return result;
}

//FIXME: #40688: needs to be localized to site's language
+ (NSString *)diggStoryPromotionString:(DiggStoryPromotion)story
{
	NSString *result;
	switch (story)
	{
		case DiggPopularStories:
			result = @"popular";
			break;
		case DiggUpcomingStories:
			result = @"upcoming";
			break;
		case DiggTopStories:
			result = @"top";
			break;
		case DiggHotStories:
			result = @"hot";
			break;
		default:
			result = nil;
			break;
	}
	return result;
}

//FIXME: #40688: needs to be localized to site's language
+ (NSString *)diggCategoryString:(NSString *)basis
{
	NSString *result = nil;
    
    if (basis)
    {
        // Sanitize the string
        basis = [basis lowercaseString];
        if ([basis isEqualToString:@"political news"]) basis = @"politics";
        
        NSMutableString *buffer = [NSMutableString stringWithString:basis];
        
        [buffer replaceOccurrencesOfString:@"." withString:@"" options:NSLiteralSearch range:NSMakeRange(0, [buffer length])];
        [buffer replaceOccurrencesOfString:@" & " withString:@"_" options:NSLiteralSearch range:NSMakeRange(0, [buffer length])];	// Convert " & " with a simple underscore
        [buffer replaceOccurrencesOfString:@" " withString:@"_" options:NSLiteralSearch range:NSMakeRange(0, [buffer length])];
        [buffer replaceOccurrencesOfString:@"/" withString:@"_" options:NSLiteralSearch range:NSMakeRange(0, [buffer length])];        
        
        if ([buffer hasPrefix:@"all"])
        {
            buffer = nil;	/// New Digg API does not accept "all" as a parameter
        }
        
        result = [[buffer copy] autorelease];
        
        //[buffer stringByRemovingCharactersNotInSet:[NSCharacterSet alphanumericASCIICharacterSet]];
    }
    
	return result;
}

//FIXME: #40688: is this localizable to site's language?
- (BOOL)diggCategoryIsTopic
{
	static NSSet *containers = nil;
	if (!containers)
	{
		containers = [[NSSet alloc] initWithObjects:
                      @"Technology",
                      @"Science",
                      @"World & Business",
                      @"Sports",
                      @"Entertainment",
                      @"Gaming",
                      @"Lifestyle",
                      @"Offbeat",
                      @"News",
                      @"Videos",
                      @"Images", 
                      nil];
	}
	
	BOOL result = ![containers containsObject:self.diggCategory];
	return result;
}

#pragma mark Properties

@synthesize diggCategory = _diggCategory;
- (void)setDiggCategory:(NSString *)value
{
    [_diggCategory autorelease];
    _diggCategory = [value copy];
    self.diggCategoryString = [[self class] diggCategoryString:_diggCategory];
}
@synthesize diggCount = _diggCount;
@synthesize diggDescriptions = _diggDescriptions;
@synthesize diggStoryPromotion = _diggStoryPromotion;
- (void)setDiggStoryPromotion:(NSUInteger)value
{
    _diggStoryPromotion = value;
    self.diggStoryPromotionString = [[self class] diggStoryPromotionString:value];
}
@synthesize diggStoryPromotionString = _diggStoryPromotionString;
@synthesize diggType = _diggType;
@synthesize diggUserOptions = _diggUserOptions;
- (void)setDiggUserOptions:(NSUInteger)value
{
    _diggUserOptions = value;
    self.diggUserOptionString = [[self class] diggUserOptionString:_diggUserOptions];
}
@synthesize diggUser = _diggUser;
@synthesize maximumStories = _maximumStories;
@synthesize openLinksInNewWindow = _openLinksInNewWindow;
@synthesize diggUserOptionString = _diggUserOptionString;
@synthesize diggCategoryString = _diggCategoryString;
@end
