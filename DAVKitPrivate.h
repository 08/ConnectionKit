/*
 *     Generated by class-dump 3.1.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2005 by Steve Nygard.
 */

#import <Cocoa/Cocoa.h>

struct _NSZone;

struct __CFHTTPMessage;

struct __CFHost;

struct __CFReadStream;

struct __CFRunLoopSource;

struct __CFWriteStream;

struct __sFILEX;

struct in6_addr {
    union {
        unsigned char __u6_addr8[16];
        unsigned short __u6_addr16[8];
        unsigned int __u6_addr32[4];
    } __u6_addr;
};

struct in_addr {
    unsigned int s_addr;
};

struct sockaddr {
    unsigned char _field1;
    unsigned char _field2;
    char _field3[14];
};

struct sockaddr_in {
    unsigned char sin_len;
    unsigned char sin_family;
    unsigned short sin_port;
    struct in_addr sin_addr;
    char sin_zero[8];
};

struct sockaddr_in6 {
    unsigned char sin6_len;
    unsigned char sin6_family;
    unsigned short sin6_port;
    unsigned int sin6_flowinfo;
    struct in6_addr sin6_addr;
    unsigned int sin6_scope_id;
};

typedef struct {
    int _field1;
    int _field2;
} CDAnonymousStruct1;

typedef struct {
    int version;
    void *info;
    void *retain;
    void *release;
    void *copyDescription;
} CDAnonymousStruct2;

/*
 * File: DAVKit
 * Arch: PowerPC (ppc)
 *       Current version: 560.0.0, Compatibility version: 1.0.0
 */

@protocol AYGroup <NSObject>
- (BOOL)operationShouldBeLaunchedNow:(id)fp8;
- (void)operationHasEnded:(id)fp8;
@end

@protocol AYOperationCompanion <NSObject>
- (void)postOperationForOperation:(id)fp8;
@end

@protocol DAVAuthStore
- (BOOL)hasCredentialsForSession:(id)fp8;
- (BOOL)session:(id)fp8 addAuthHeaderToMessage:(struct __CFHTTPMessage *)fp12;
- (void)session:(id)fp8 storeAuthChallenge:(id)fp12 forURL:(id)fp16;
- (void)clearAuthChallengeForSession:(id)fp8;
@end

@protocol DAVResponseBodyReader
- (BOOL)request:(id)fp8 acceptResponseWithHTTPStatusCode:(int)fp12;
- (void)request:(id)fp8 readResponseBody:(id)fp12;
@end

@interface DAVAdapter : NSObject
{
}

- (void)session:(id)fp8 createdRequest:(id)fp12;
- (void)session:(id)fp8 willDestroyRequest:(id)fp12;

@end

@interface _DAVGetToFileReader : NSObject <DAVResponseBodyReader>
{
    NSFileHandle *_fileHandle;
}

- (id)initWithFileHandle:(id)fp8;
- (void)dealloc;
- (BOOL)request:(id)fp8 acceptResponseWithHTTPStatusCode:(int)fp12;
- (void)request:(id)fp8 readResponseBody:(id)fp12;

@end

@interface _DAVGetReader : NSObject <DAVResponseBodyReader>
{
    NSMutableData *_data;
}

- (id)init;
- (void)dealloc;
- (BOOL)request:(id)fp8 acceptResponseWithHTTPStatusCode:(int)fp12;
- (void)request:(id)fp8 readResponseBody:(id)fp12;
- (id)data;

@end

@interface NSURL (DAVAdditions)
+ (int)classicPortForScheme:(id)fp8;
+ (id)URLWithDirtyString:(id)fp8;
+ (id)URLWithScheme:(id)fp8 host:(id)fp12 port:(int)fp16 uri:(id)fp20;
- (id)initWithDirtyString:(id)fp8;
- (id)uri;
- (id)URLWithUsername:(id)fp8;
- (id)URLWithoutUsername;
- (id)URLWithoutPassword;
- (id)initWithScheme:(id)fp8 host:(id)fp12 port:(int)fp16 uri:(id)fp20;
@end

@interface NSString (DAVAdditions)
+ (unsigned int)encodingForIANACharSetName:(id)fp8;
+ (id)IANACharSetNameFromEncoding:(unsigned int)fp8;
- (id)stringByXMLQuoting;
- (id)stringByURLQuoting;
- (id)stringByURLUnquoting;
- (id)mimeAnalysis;
@end

@interface NSDictionary (DAVHasKeyAddition)
- (BOOL)hasKey:(id)fp8;
@end


@interface _DAVLockBodyReader : NSObject <DAVResponseBodyReader>
{
    NSMutableData *readData;
    NSString *lockToken;
    int timeout;
}

- (id)init;
- (void)dealloc;
- (id)lockToken;
- (int)lockTimeout;
- (void)_calculateLockInfos;
- (BOOL)request:(id)fp8 acceptResponseWithHTTPStatusCode:(int)fp12;
- (void)request:(id)fp8 readResponseBody:(id)fp12;

@end

@interface DAVMultiStatusBodyReader : NSObject <DAVResponseBodyReader>
{
    Class responseClass;
    NSMutableData *readData;
    NSArray *responses;
}

+ (id)multiStatusBodyReader;
+ (id)multiStatusBodyReaderWithResponseClass:(Class)fp8;
+ (id)propFindBodyReader;
- (id)init;
- (id)initWithResponseClass:(Class)fp8;
- (id)initForPropFind;
- (void)dealloc;
- (id)responses;
- (BOOL)request:(id)fp8 acceptResponseWithHTTPStatusCode:(int)fp12;
- (void)_calculateResponses;
- (void)request:(id)fp8 readResponseBody:(id)fp12;

@end

@interface DAVMultiStatusResponse : NSObject
{
    NSURL *href;
    NSString *responseDescription;
    int statusCode;
}

- (id)init;
- (id)initWithXMLNode:(id)fp8;
- (void)dealloc;
- (id)href;
- (int)statusCode;
- (id)responseDescription;
- (BOOL)handleResponseSubnode:(id)fp8;

@end

@interface DAVPropFindResponse : DAVMultiStatusResponse
{
    NSMutableDictionary *categorizedProperties;
}

- (id)init;
- (void)dealloc;
- (id)propertiesWithStatusCode:(int)fp8;
- (id)properties;
- (id)propertyForKey:(id)fp8;
- (int)statusCodeForKey:(id)fp8;
- (BOOL)handleResponseSubnode:(id)fp8;

@end

@interface DAVPropFindResponse (WebDAVProperties)
- (id)_getPropertyForKey:(id)fp8;
- (long long)getContentLength;
- (id)creationDate;
- (id)getDisplayName;
- (BOOL)isCollection;
- (BOOL)isFolder;
- (id)ressourceType;
@end

@interface AYOperation : NSObject
{
    id _asyncProxy;
    NSThread *_currentThread;
    NSThread *_baseThread;
    AYOperation *_parentOperation;
    AYOperation *_mainOperation;
    AYOperation *_currentChildOperation;
    id _group;
    NSLock *_operationLock;
    NSError *_error;
    BOOL _operationEnded;
    BOOL _operationAborted;
    BOOL _silent;
    BOOL _canAbortNow;
    BOOL _inAbortProcess;
    int _currentMark;
    void *_reserved;
    id _notificationDelegate;
    NSMutableDictionary *_privateInfos;
}

+ (void)_initCurrentThread;
+ (void)_initMainThread;
+ (void)initialize;
+ (void)_noLockForThread:(id)fp8;
+ (void)_lockForAllThreads;
+ (BOOL)_lockWaitingForOperation;
+ (void)lockOperations;
+ (void)unlockOperations;
+ (id)mainThread;
+ (BOOL)_dispatchNextOperationInQueue;
+ (void)_workerThread;
+ (void)_launchOneThread;
+ (void)pushInvocation:(id)fp8;
+ (BOOL)popOperation:(id)fp8;
+ (void)unblockAllOperationsForGroup:(id)fp8;
+ (void)endAllPendingOperationsOfGroup:(id)fp8 withError:(id)fp12;
+ (id)currentOperation;
+ (void)_setCurrentOperation:(id)fp8;
- (void)_setCurrentThread:(id)fp8;
- (id)init;
- (void)dealloc;
- (id)async;
- (id)syncFor:(id)fp8;
- (id)synchronous;
- (void)_setCurrentChildOperation:(id)fp8;
- (id)_currentChildOperation;
- (id)parentOperation;
- (id)mainOperation;
- (id)operationThread;
- (id)baseThread;
- (BOOL)isAsync;
- (void)lockOperation;
- (void)unlockOperation;
- (void)_handleEventRecursively:(id)fp8;
- (void)_sendEventToThreadLocked:(id)fp8;
- (void)sendEventToThread:(id)fp8;
- (void)_startAbortProcess;
- (BOOL)handleEventInThread:(id)fp8;
- (void)abortOperation;
- (void)waitForOperationToEnd;
- (BOOL)hasOperationEnded;
- (void)resetOperation;
- (void)setOperationGroup:(id)fp8;
- (id)operationGroup;
- (void)setOperationCompanion:(id)fp8;
- (id)operationCompanion;
- (BOOL)isRunLoopBased;
- (void)runOperationWithTimeOut:(unsigned int)fp8;
- (void)endOperationWithError:(id)fp8;
- (void)markWithTag:(int)fp8;
- (void)markWithTag:(int)fp8 notify:(BOOL)fp12;
- (int)currentMark;
- (void)setSilent:(BOOL)fp8;
- (BOOL)isSilent;
- (void)handleNotificationOfChildOperation:(id)fp8 notification:(id)fp12;
- (void)notifyWithName:(id)fp8 infos:(id)fp12;
- (void)setNotificationDelegate:(id)fp8;
- (id)notificationDelegate;
- (long long)operationProgress;
- (long long)operationTotal;
- (void)setCanAbortNow:(BOOL)fp8;
- (BOOL)canAbortNow;
- (void)operationWillAbort;
- (void)setError:(id)fp8;
- (id)error;
- (void)finalizeOperation;
- (void)postOperation;
- (void)setInfo:(id)fp8 forKey:(id)fp12;
- (id)infoForKey:(id)fp8;
- (void)removeInfoForKey:(id)fp8;

@end

@interface DAVRequest : AYOperation
{
    struct __CFHTTPMessage *_requestMessage;
    struct __CFHTTPMessage *_responseMessage;
    struct __CFReadStream *_readStream;
    struct __CFReadStream *_bodyStream;
    CDAnonymousStruct2 _clientContext;
    DAVSession *_session;
    NSString *_method;
    NSString *_uri;
    NSMutableSet *_bodyReaders;
    NSMutableSet *_acceptingReaders;
    NSMutableDictionary *_requestHeaders;
    NSDictionary *_headers;
    NSString *_httpStatus;
    unsigned int _httpStatusCode;
    NSMutableDictionary *_attemptDictionary;
    NSData *_requestBodyData;
    long long _contentLength;
    long long _readLength;
    long long _requestLength;
    long long _putLength;
    id _delegate;
    void *_davReserved;
    int _certificatePolicy;
}

+ (void)initialize;
+ (id)requestWithURL:(id)fp8 method:(id)fp12;
+ (id)requestWithSession:(id)fp8 method:(id)fp12 path:(id)fp16;
+ (id)requestWithSession:(id)fp8 method:(id)fp12 URI:(id)fp16;
- (id)initWithURL:(id)fp8 method:(id)fp12;
- (id)initWithSession:(id)fp8 method:(id)fp12 path:(id)fp16;
- (id)initWithSession:(id)fp8 method:(id)fp12 URI:(id)fp16;
- (void)dealloc;
- (id)description;
- (id)session;
- (id)method;
- (id)uri;
- (id)url;
- (void)setRequestBodyWithData:(id)fp8;
- (void)setRequestBodyWithString:(id)fp8 encoding:(unsigned int)fp12;
- (void)setHeader:(id)fp8 withValue:(id)fp12;
- (id)requestHeaders;
- (void)addResponseBodyReader:(id)fp8;
- (void)grantRequestWithLockToken:(id)fp8;
- (void)grantRequestWithLockTokens:(id)fp8;
- (void)initBeforeDispatch;
- (void)dispatch;
- (int)httpStatusCode;
- (id)responseHeaders;
- (long long)responseContentLength;
- (long long)readLength;
- (long long)operationProgress;
- (long long)operationTotal;
- (long long)requestLength;
- (long long)putLength;
- (id)httpStatus;
- (id)acceptingReaders;
- (void)finalizeOperation;

@end

@interface DAVRequest (SSL)
+ (BOOL)allowsAnyHTTPSCertificateForHost:(id)fp8;
+ (void)setAllowsAnyHTTPSCertificateForHost:(id)fp8 value:(BOOL)fp12;
+ (int)defaultCertificatePolicy;
+ (void)setDefaultCertificatePolicy:(int)fp8;
- (int)certificatePolicy;
- (void)setCertificatePolicy:(int)fp8;
@end

@interface DAVRequest (Private)
- (unsigned char)_bodyStreamOpen:(CDAnonymousStruct1 *)fp8 openComplete:(char *)fp12;
- (long)_bodyStreamRead:(char *)fp8 bufferLength:(long)fp12 error:(CDAnonymousStruct1 *)fp16 atEOF:(char *)fp20;
- (unsigned char)_bodyStreamCanRead;
- (BOOL)_computeHeaders;
- (void)_readStreamEvent:(int)fp8;
- (BOOL)_initHTTPRequest;
- (void)endOperationWithError:(id)fp8;
- (BOOL)isRunLoopBased;
- (id)getErrorFromHTTPStatus;
@end

@interface DAVRequest (DAVMultiStatusRequest)
+ (id)multiStatusRequestWithURL:(id)fp8 method:(id)fp12;
+ (id)multiStatusRequestWithSession:(id)fp8 method:(id)fp12 path:(id)fp16;
+ (id)multiStatusRequestWithURL:(id)fp8 method:(id)fp12 responseClass:(Class)fp16;
+ (id)multiStatusRequestWithSession:(id)fp8 method:(id)fp12 path:(id)fp16 responseClass:(Class)fp20;
+ (id)propFindRequestWithURL:(id)fp8 withDepth:(id)fp12 lookingForProps:(id)fp16;
+ (id)propFindRequestWithSession:(id)fp8 withDepth:(id)fp12 path:(id)fp16 lookingForProps:(id)fp20;
+ (id)propPatchRequestWithURL:(id)fp8 patchProperties:(id)fp12 deleteProperties:(id)fp16;
+ (id)propPatchRequestWithSession:(id)fp8 path:(id)fp12 patchProperties:(id)fp16 deleteProperties:(id)fp20;
- (void)_initReaderWithClass:(Class)fp8;
- (id)initMultiStatusRequestWithURL:(id)fp8 method:(id)fp12;
- (id)initMultiStatusRequestWithSession:(id)fp8 method:(id)fp12 path:(id)fp16;
- (id)initMultiStatusRequestWithURL:(id)fp8 method:(id)fp12 responseClass:(Class)fp16;
- (id)initMultiStatusRequestWithSession:(id)fp8 method:(id)fp12 path:(id)fp16 responseClass:(Class)fp20;
- (id)responses;
- (void)_initForPropFindWithDepth:(id)fp8 lookingForProps:(id)fp12;
- (id)initPropFindWithURL:(id)fp8 withDepth:(id)fp12 lookingForProps:(id)fp16;
- (id)initPropFindWithSession:(id)fp8 withDepth:(id)fp12 path:(id)fp16 lookingForProps:(id)fp20;
- (void)_initForPropPatchWithPatchDict:(id)fp8 deleteProperties:(id)fp12;
- (id)initPropPatchWithURL:(id)fp8 patchProperties:(id)fp12 deleteProperties:(id)fp16;
- (id)initPropPatchWithSession:(id)fp8 path:(id)fp12 patchProperties:(id)fp16 deleteProperties:(id)fp20;
@end

@interface DAVRequest (Internal)
- (struct __CFHTTPMessage *)lastResponseMessage;
- (struct __CFHTTPMessage *)lastRequestMessage;
- (int)attemptForHTTPCode:(int)fp8;
- (BOOL)setCertificatePolicyOnStream:(struct __CFReadStream *)fp8;
- (struct __CFReadStream *)newStreamWithRequestMessage:(struct __CFHTTPMessage *)fp8;
@end

@interface DAVRequest (DAVSession)
- (void)setUsername:(id)fp8 andPassword:(id)fp12;
- (id)username;
- (id)password;
@end

@interface DAVUnlock : DAVRequest
{
}

+ (id)unlockRequestWithURL:(id)fp8 lockToken:(id)fp12;
+ (id)unlockRequestWithSession:(id)fp8 path:(id)fp12 lockToken:(id)fp16;
- (void)_initUnlockForToken:(id)fp8;
- (id)initUnlockWithURL:(id)fp8 lockToken:(id)fp12;
- (id)initUnlockWithSession:(id)fp8 path:(id)fp12 lockToken:(id)fp16;

@end

@interface DAVLock : DAVRequest
{
}

+ (id)lockRequestWithURL:(id)fp8;
+ (id)lockRequestWithSession:(id)fp8 path:(id)fp12;
+ (id)relockRequestWithURL:(id)fp8 lockToken:(id)fp12;
+ (id)relockRequestWithSession:(id)fp8 path:(id)fp12 lockToken:(id)fp16;
- (void)_initLockRequest;
- (id)initLockWithURL:(id)fp8;
- (id)initLockWithSession:(id)fp8 path:(id)fp12;
- (void)_initRelockRequestWithToken:(id)fp8;
- (id)initRelockWithURL:(id)fp8 lockToken:(id)fp12;
- (id)initRelockWithSession:(id)fp8 path:(id)fp12 lockToken:(id)fp16;
- (id)lockToken;
- (int)lockTimeout;
- (id)dependenciesList;
- (void)finalizeOperation;

@end

@interface DAVHead : DAVRequest
{
}

+ (id)headRequestWithURL:(id)fp8;
+ (id)headRequestWithSession:(id)fp8 path:(id)fp12;
+ (id)headRequestWithSession:(id)fp8 URI:(id)fp12;
- (id)initHeadWithURL:(id)fp8;
- (id)initHeadWithSession:(id)fp8 path:(id)fp12;
- (id)initHeadWithSession:(id)fp8 URI:(id)fp12;

@end

@interface DAVPost : DAVRequest
{
}

+ (id)postRequestWithURL:(id)fp8 data:(id)fp12;
+ (id)postRequestWithSession:(id)fp8 path:(id)fp12 data:(id)fp16;
- (id)initPostWithURL:(id)fp8 data:(id)fp12;
- (id)initPostWithSession:(id)fp8 path:(id)fp12 data:(id)fp16;
- (id)data;

@end

@interface DAVGetToFile : DAVRequest
{
}

+ (id)getRequestWithURL:(id)fp8 toFileHandle:(id)fp12;
+ (id)getRequestWithSession:(id)fp8 path:(id)fp12 toFileHandle:(id)fp16;
+ (id)getRequestWithSession:(id)fp8 URI:(id)fp12 toFileHandle:(id)fp16;
- (id)initGetWithURL:(id)fp8 toFileHandle:(id)fp12;
- (id)initGetWithSession:(id)fp8 path:(id)fp12 toFileHandle:(id)fp16;
- (id)initGetWithSession:(id)fp8 URI:(id)fp12 toFileHandle:(id)fp16;

@end

@interface DAVGet : DAVRequest
{
}

+ (id)getRequestWithURL:(id)fp8;
+ (id)getRequestWithSession:(id)fp8 path:(id)fp12;
+ (id)getRequestWithSession:(id)fp8 URI:(id)fp12;
- (id)initGetWithURL:(id)fp8;
- (id)initGetWithSession:(id)fp8 path:(id)fp12;
- (id)initGetWithSession:(id)fp8 URI:(id)fp12;
- (id)data;

@end

@interface DAVPut : DAVRequest
{
}

+ (id)putRequestWithURL:(id)fp8 data:(id)fp12;
+ (id)putRequestWithSession:(id)fp8 path:(id)fp12 data:(id)fp16;
- (id)initPutWithURL:(id)fp8 data:(id)fp12;
- (id)initPutWithSession:(id)fp8 path:(id)fp12 data:(id)fp16;
- (long long)operationProgress;
- (long long)operationTotal;

@end

@interface DAVDelete : DAVRequest
{
}

+ (id)deleteRequestWithURL:(id)fp8;
+ (id)deleteRequestWithSession:(id)fp8 path:(id)fp12;
- (id)initDeleteWithURL:(id)fp8;
- (id)initDeleteWithSession:(id)fp8 path:(id)fp12;
- (id)dependenciesList;

@end

@interface DAVMakeCollection : DAVRequest
{
}

+ (id)makeCollectionRequestWithURL:(id)fp8;
+ (id)makeCollectionRequestWithSession:(id)fp8 path:(id)fp12;
- (id)initMakeCollectionWithURL:(id)fp8;
- (id)initMakeCollectionWithSession:(id)fp8 path:(id)fp12;

@end

@interface DAVListMembers : DAVRequest
{
    BOOL showHidden;
}

+ (id)listMembersRequestWithURL:(id)fp8 showHidden:(BOOL)fp12;
+ (id)listMembersRequestWithSession:(id)fp8 path:(id)fp12 showHidden:(BOOL)fp16;
- (id)initListMembersWithURL:(id)fp8 showHidden:(BOOL)fp12;
- (id)initListMembersWithSession:(id)fp8 path:(id)fp12 showHidden:(BOOL)fp16;
- (id)members;
- (void)finalizeOperation;

@end

@interface DAVGetInfos : DAVRequest
{
}

+ (id)getInfosRequestWithURL:(id)fp8;
+ (id)getInfosRequestWithSession:(id)fp8 path:(id)fp12;
- (id)initGetInfosWithURL:(id)fp8;
- (id)initGetInfosWithSession:(id)fp8 path:(id)fp12;
- (id)infos;
- (void)finalizeOperation;

@end

@interface AYAddress : NSObject <NSCopying>
{
}

+ (void)initialize;
+ (id)allocWithZone:(struct _NSZone *)fp8;
+ (id)_createAddressFromSockaddrBuffer:(struct sockaddr *)fp8;
+ (id)addressWithData:(id)fp8;
+ (id)addressWithString:(id)fp8;
+ (id)addressOfPeerFromSocket:(int)fp8;
+ (id)addressOfLocalFromSocket:(int)fp8;
+ (id)addressesFromDataAddresses:(id)fp8;
+ (id)IPV4AddressesFromDataAddresses:(id)fp8;
- (id)initAddressWithData:(id)fp8;
- (id)initAddressWithString:(id)fp8;
- (id)initAddressWithPeerFromSocket:(int)fp8;
- (id)initAddressWithLocalFromSocket:(int)fp8;
- (id)type;
- (id)addressAsString;
- (int)port;
- (BOOL)isLocalAddressConnectingTo:(id)fp8;
- (id)addressAsData;
- (void)getAddressAsSockAddr:(struct sockaddr *)fp8 length:(int *)fp12;
- (id)description;
- (id)URLToAddressWithScheme:(id)fp8;
- (id)URLToAddressWithScheme:(id)fp8 andPort:(int)fp12;
- (id)URLToAddressWithScheme:(id)fp8 andPort:(int)fp12 URI:(id)fp16;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)dumpInternal;

@end

@interface DAVSession : NSObject <AYGroup>
{
    NSString *_scheme;
    NSString *_host;
    AYAddress *_address;
    int _port;
    BOOL _bypassProxies;
    BOOL _builtinRedirect;
    NSString *_userAgent;
    NSString *_username;
    NSString *_password;
    unsigned int _readTimeOut;
    id _delegate;
    NSMutableDictionary *_privateInfos;
    NSMutableSet *_adapters;
    int _bufferSize;
    NSLock *_sessionLock;
    int _numWorkerThread;
    id _authStore;
    id _simpleAuthStore;
    void *_davReserved;
}

+ (void)initialize;
+ (id)sessionWithScheme:(id)fp8 host:(id)fp12 port:(int)fp16;
+ (id)sessionWithURL:(id)fp8;
+ (void)setMaxRedirection:(int)fp8;
+ (void)setMaxWorkerThreadsPerSession:(int)fp8;
+ (void)setProxiesDelegate:(id)fp8;
+ (void)setDefaultUserAgent:(id)fp8;
+ (id)defaultUserAgent;
- (id)initWithScheme:(id)fp8 host:(id)fp12 port:(int)fp16;
- (id)initWithURL:(id)fp8;
- (void)dealloc;
- (id)description;
- (id)scheme;
- (id)host;
- (int)port;
- (id)URLToURI:(id)fp8;
- (void)setBuiltinRedirect:(BOOL)fp8;
- (BOOL)isBuiltinRedirect;
- (void)setAuthStore:(id)fp8;
- (void)clearAuthChallenge;
- (void)addAdapter:(id)fp8;
- (void)setInfo:(id)fp8 forKey:(id)fp12;
- (id)infoForKey:(id)fp8;
- (void)setDelegate:(id)fp8;
- (void)setUsername:(id)fp8 andPassword:(id)fp12;
- (id)username;
- (id)password;
- (BOOL)hasCredentials;
- (void)setLockOwner:(id)fp8;
- (id)lockOwner;
- (void)setReadTimeOut:(unsigned int)fp8;
- (unsigned int)readTimeOut;
- (void)setUserAgent:(id)fp8;
- (id)userAgent;
- (void)setBypassProxies:(BOOL)fp8;
- (BOOL)isBypassProxies;
- (void)setKeepAlive:(BOOL)fp8;
- (BOOL)keepAlive;
- (int)workerThreadsCount;
- (BOOL)operationShouldBeLaunchedNow:(id)fp8;
- (void)operationHasEnded:(id)fp8;

@end

@interface DAVChallenge : NSObject
{
}

- (BOOL)addAuthHeaderToMessage:(struct __CFHTTPMessage *)fp8;

@end

@interface _DAVNaiveAuthStore : NSObject <DAVAuthStore>
{
    NSString *baseHost;
    NSString *baseScheme;
    int basePort;
    DAVChallenge *authChallenge;
}

- (id)init;
- (void)dealloc;
- (BOOL)hasCredentialsForSession:(id)fp8;
- (BOOL)session:(id)fp8 addAuthHeaderToMessage:(struct __CFHTTPMessage *)fp12;
- (void)session:(id)fp8 storeAuthChallenge:(id)fp12 forURL:(id)fp16;
- (void)clearAuthChallengeForSession:(id)fp8;

@end

@interface _DAVBasicChallenge : DAVChallenge
{
    NSString *authString;
}

- (id)initWithAuthString:(id)fp8;
- (void)dealloc;
- (BOOL)addAuthHeaderToMessage:(struct __CFHTTPMessage *)fp8;

@end

@interface _DAVTotalChallenge : DAVChallenge
{
    struct __CFHTTPMessage *badAuthResponse;
    NSString *username;
    NSString *password;
}

- (id)initWithBadAuthResponse:(struct __CFHTTPMessage *)fp8 username:(id)fp12 password:(id)fp16;
- (void)dealloc;
- (BOOL)addAuthHeaderToMessage:(struct __CFHTTPMessage *)fp8;

@end

@interface _DAVRunLoopAdder : NSObject
{
    struct __CFRunLoopSource *_source;
}

- (id)initWithRunLoopSource:(struct __CFRunLoopSource *)fp8;
- (void)addRunLoopSource;

@end

@interface DAVSession (Internal)
- (void)notifyAdaptersRequestCreated:(id)fp8;
- (void)notifyAdaptersRequestDestroyed:(id)fp8;
- (id)getNewRequestMessage:(struct __CFHTTPMessage **)fp8 andStream:(struct __CFReadStream **)fp12 forRequest:(id)fp16;
- (long)bufferSize;
- (void)correctBufferSizeWithSize:(long)fp8;
@end

@interface DAVXMLNode : NSObject
{
    NSMutableArray *_children;
    NSDictionary *_attributes;
    NSString *_content;
    NSString *_name;
}

- (id)initWithName:(id)fp8 attributes:(id)fp12;
- (void)dealloc;
- (void)addChild:(id)fp8;
- (void)setContent:(id)fp8;
- (id)name;
- (id)content;
- (id)textContent;
- (id)attributes;
- (id)childrenEnumerator;
- (unsigned int)childrenCount;
- (id)description;
- (id)xmlStringWithBag:(id)fp8;
- (id)dataUsingEncoding:(unsigned int)fp8;
- (id)simpleTraverseWithPath:(id)fp8;
- (id)simpleTraverseWithPathArray:(id)fp8 pos:(unsigned int)fp12;

@end

@interface DAVXMLNode (DAVConvenientAdditions)
+ (id)collectionNode;
@end

@interface NSObject (DAVXMLNode)
- (id)xmlStringWithBag:(id)fp8;
@end

@interface DAVXMLNSBag : NSObject
{
    NSMutableDictionary *tagMapping;
    NSMutableDictionary *allNS;
    unsigned int nsCounter;
    void *reserved1;
}

+ (void)initialize;
+ (id)_smartTagForTag:(id)fp8;
+ (id)namespaceForTag:(id)fp8;
+ (void)registerNSTags:(id)fp8 withNamespace:(id)fp12;
- (id)init;
- (void)dealloc;
- (id)tagForNSTag:(id)fp8;
- (id)allXMLNSAttributes;

@end

@interface _DAVXMLNSTag : NSObject
{
    NSString *ns;
    NSString *tag;
}

- (id)initWithNS:(id)fp8 andTag:(id)fp12;
- (void)dealloc;
- (id)namespace;
- (id)tag;

@end

@interface _AYProxy : NSProxy
{
    AYOperation *_operation;
    BOOL _asyncLaunch;
}

- (id)initWithOperation:(id)fp8;
- (void)setAsyncLaunch:(BOOL)fp8;
- (BOOL)respondsToSelector:(SEL)fp8;
- (BOOL)conformsToProtocol:(id)fp8;
- (void)forwardInvocation:(id)fp8;
- (id)methodSignatureForSelector:(SEL)fp8;
- (id)description;

@end

@interface AYEvent : NSObject
{
    NSString *_domain;
    int _code;
    id _info;
}

+ (id)eventWithDomain:(id)fp8 eventCode:(int)fp12 userInfo:(id)fp16;
- (id)initWithDomain:(id)fp8 eventCode:(int)fp12 userInfo:(id)fp16;
- (void)dealloc;
- (id)domain;
- (int)code;
- (id)userInfo;
- (id)description;

@end

@interface _AYOperationEndWaiter : NSObject
{
    AYOperation *_operation;
    BOOL _finished;
}

- (id)initWithOperation:(id)fp8;
- (void)dealloc;
- (void)wait;
- (void)operationEnded:(id)fp8;

@end

@interface AYSimpleOperationCompanion : NSObject <AYOperationCompanion>
{
    AYOperation *_operation;
}

- (id)initWithOperation:(id)fp8;
- (id)operation;
- (void)postOperationForOperation:(id)fp8;

@end

@interface AYTimer : AYOperation
{
}

- (void)sleep:(double)fp8;
- (BOOL)isRunLoopBased;
- (void)finalizeOperation;

@end

@interface DAVXMLTree : NSObject
{
    DAVXMLNode *root;
    NSMutableArray *stack;
    NSMutableData *contentData;
}

+ (id)treeWithXMLData:(id)fp8;
- (id)initWithXMLData:(id)fp8;
- (void)dealloc;
- (id)root;

@end

@interface DAVXMLTree (Private)
- (void)_startelement:(const char *)fp8 attributes:(const char **)fp12;
- (void)_endelement:(const char *)fp8;
- (void)_data:(const char *)fp8 len:(int)fp12;
@end

@interface NSStream (CFStreamErrorSupport)
+ (id)errorForCFStreamError:(CDAnonymousStruct1)fp8;
- (id)betterStreamError;
@end

@interface AYFTPGet : AYOperation
{
    NSURL *_url;
    struct __CFReadStream *_readStream;
    CDAnonymousStruct2 _clientContext;
    NSString *_username;
    NSString *_password;
    long long _ressourceSize;
    long long _readSize;
    NSMutableData *_readData;
}

+ (id)getRequestWithURL:(id)fp8 username:(id)fp12 password:(id)fp16;
- (id)initGetRequestWithURL:(id)fp8 username:(id)fp12 password:(id)fp16;
- (void)dealloc;
- (void)resetOperation;
- (void)dispatch;
- (id)data;
- (void)endOperationWithError:(id)fp8;
- (BOOL)isRunLoopBased;
- (void)_readStreamEvent:(int)fp8;
- (long long)operationProgress;
- (long long)operationTotal;

@end

@interface AYFTPPut : AYOperation
{
    NSString *_username;
    NSString *_password;
    NSURL *_url;
    struct __CFWriteStream *_writeStream;
    NSMutableData *_writeData;
    long long _writeSize;
}

+ (id)putRequestWithURL:(id)fp8 username:(id)fp12 password:(id)fp16 data:(id)fp20;
- (id)initPutRequestWithURL:(id)fp8 username:(id)fp12 password:(id)fp16 data:(id)fp20;
- (void)dealloc;
- (void)dispatch;
- (void)setStreamProperties:(struct __CFWriteStream *)fp8;

@end

@interface AYFTPPut (Hidden)
- (void)_writeStreamEvent:(int)fp8;
@end

@interface AYFTPPut (Override)
- (void)resetOperation;
- (void)endOperationWithError:(id)fp8;
- (BOOL)isRunLoopBased;
- (long long)operationProgress;
- (long long)operationTotal;
@end

@interface AYHost : AYOperation
{
    struct __CFHost *_hostRef;
    struct CFHostClientContext _context;
    NSArray *_names;
    NSArray *_addresses;
    NSData *_isReachable;
    BOOL _wasCreatedFromName;
    id _origin;
    int _infoType;
}

+ (id)hostWithName:(id)fp8;
+ (id)hostWithAddress:(id)fp8;
- (void)_setClient;
- (id)initHostWithName:(id)fp8;
- (id)initHostWithAddress:(id)fp8;
- (void)dealloc;
- (void)_launchInfoResolutionWithType:(int)fp8;
- (void)resolveAddresses;
- (id)addresses;
- (void)resolveNames;
- (id)names;
- (void)checkReachability;
- (unsigned int)reachability;
- (void)endOperationWithError:(id)fp8;
- (void)_handleInfoResolutionEventWithType:(int)fp8 error:(const CDAnonymousStruct1 *)fp12;
- (id)description;

@end

@interface AYIPV6Address : AYAddress
{
    struct sockaddr_in6 _saddr;
}

- (id)initWithSockaddrBuffer:(struct sockaddr *)fp8;
- (id)type;
- (id)addressAsString;
- (int)port;
- (BOOL)isLocalAddressConnectingTo:(id)fp8;
- (id)addressAsData;
- (void)getAddressAsSockAddr:(struct sockaddr *)fp8 length:(int *)fp12;
- (id)URLToAddressWithScheme:(id)fp8 andPort:(int)fp12 URI:(id)fp16;
- (void)dumpInternal;

@end

@interface AYIPV4Address : AYAddress
{
    struct sockaddr_in _saddr;
}

- (id)initWithSockaddrBuffer:(struct sockaddr *)fp8;
- (id)type;
- (id)addressAsString;
- (int)port;
- (unsigned int)_s_addr;
- (BOOL)isLocalAddressConnectingTo:(id)fp8;
- (id)addressAsData;
- (void)getAddressAsSockAddr:(struct sockaddr *)fp8 length:(int *)fp12;
- (id)URLToAddressWithScheme:(id)fp8 andPort:(int)fp12 URI:(id)fp16;
- (void)dumpInternal;

@end

@interface AYAddress (LocalProtection)
+ (void)startListeningToNetworkConfiguration;
+ (void)updateNetmasksFromStoreWithChangedKeys:(id)fp8;
+ (void)stopListeningToNetworkConfiguration;
+ (unsigned int)netMaskForIPV4Address:(id)fp8;
@end

@interface AYLogger : NSObject
{
}

+ (void)initialize;
+ (void)_recalculateCacheWithMask:(int)fp8;
+ (void)addLogger:(id)fp8 forType:(id)fp12 mask:(int)fp16;
+ (void)removeLogger:(id)fp8 forType:(id)fp12 mask:(int)fp16;
+ (id)stderrStreamLogger;
+ (id)fileStreamLogger;
+ (id)urlToFileStreamLogger;
+ (void)logInFile:(char *)fp8 function:(const char *)fp12 line:(unsigned int)fp16 withType:(id)fp20 level:(int)fp24 format:(id)fp28;
- (void)dumpLogInFile:(char *)fp8 function:(const char *)fp12 line:(unsigned int)fp16 withType:(id)fp20 level:(int)fp24 message:(id)fp28;

@end

@interface _AYStderrLogger : AYLogger
{
}

- (void)dumpLogInFile:(char *)fp8 function:(const char *)fp12 line:(unsigned int)fp16 withType:(id)fp20 level:(int)fp24 message:(id)fp28;

@end

@interface _AYFileLogger : AYLogger
{
    struct __sFILE *_logFile;
    NSURL *_urlToFile;
}

- (id)init;
- (void)dealloc;
- (id)urlToFile;
- (void)dumpLogInFile:(char *)fp8 function:(const char *)fp12 line:(unsigned int)fp16 withType:(id)fp20 level:(int)fp24 message:(id)fp28;

@end

@interface _AYNoLogger : AYLogger
{
}

- (void)dumpLogInFile:(char *)fp8 function:(const char *)fp12 line:(unsigned int)fp16 withType:(id)fp20 level:(int)fp24 message:(id)fp28;

@end

@interface AYFTPDelete : AYFTPPut
{
}

+ (id)deleteRequestWithURL:(id)fp8 username:(id)fp12 password:(id)fp16;
- (id)initDeleteRequestWithURL:(id)fp8 username:(id)fp12 password:(id)fp16;

@end

@interface AYFTPDelete (Override)
- (void)setStreamProperties:(struct __CFWriteStream *)fp8;
@end

@interface DAVOptions : DAVRequest
{
}

+ (id)optionsRequestWithURL:(id)fp8;
+ (id)optionsRequestWithSession:(id)fp8 path:(id)fp12;
- (id)initOptionsWithURL:(id)fp8;
- (id)initOptionsWithSession:(id)fp8 path:(id)fp12;

@end


