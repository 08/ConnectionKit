#!/bin/bash

# we base the PackageSDK target on Sandvox.xcconfig through the Xcode UI
# this brings in SVN_VERSION, SANDVOX_VERSION, PRODUCT_VARIANT, CK_REVISION, IMEDIA_REVISION, and SP_REVISION

echo ""
echo "Gathering resources for packaging SDK ..."
echo "SVN_VERSION is ${SVN_VERSION}"
echo "SANDVOX_VERSION is ${SANDVOX_VERSION}"
echo "PRODUCT_VARIANT is ${PRODUCT_VARIANT}"
echo ""

PLUGINS_DIR="${SRCROOT}/../Plugins"
XCODE_DIR="${SRCROOT}/../XCode"

PBXCP="${SRCROOT}/../../../Shared/trunk/Tools/pbxcp"

# the location of BuildSettings comes from the Update Version script
BUILDSETTINGS_DIR="/private/tmp/build-sandvox"

SLA_ZIP_FILE="${PLUGINS_DIR}/SLA-Plugins.zip"
SLA_FILE="${BUILDSETTINGS_DIR}/SLA-Plugins"

# we keep the .zip of the SLA with the project, then copy it to /tmp and inflate it, if needed
if test -r ${SLA_FILE}
then
	echo "Removing previous SLA file..."
	rm ${SLA_FILE}
fi

if [ ! -r $SLA_FILE ]
then
	echo "copying ${SLA_ZIP_FILE} to ${SLA_FILE}.zip"
	cp "${SLA_ZIP_FILE}" "${SLA_FILE}.zip"
	echo "unarchving ${SLA_FILE}.zip"
	ditto -x -k --rsrc "${SLA_FILE}.zip" ${BUILDSETTINGS_DIR}
fi

LICENSE_RTF="License.rtf"
LICENSE_FILE="${PLUGINS_DIR}/${LICENSE_RTF}"

READ_ME_RTF="READ ME.rtf"
READ_ME_FILE="${PLUGINS_DIR}/${READ_ME_RTF}"

# the dmg names that we'll use
VOLUME_NAME="Sandvox-Plugin-SDK"
DMG_TEMP_NAME="temp"
DMG_FINAL_NAME="_Sandvox-Plugin-SDK-${SVN_VERSION}"

# the directory that will appear on ~/Desktop after download
SDK_DIR_NAME="Sandvox Plugin SDK"

# the directory within the mounted .dmg we'll copy to
DMG_DIR="/Volumes/${VOLUME_NAME}/${SDK_DIR_NAME}"

# the directory we'll do our work in
SCRATCH_DIR="/private/tmp/build-sdk-dmg"

if test -d "${SCRATCH_DIR}"
then
	echo "Removing old scratch directory..."
	rm -rf "${SCRATCH_DIR}"
fi
mkdir -p "${SCRATCH_DIR}"

echo "Packaging SDK..."
pushd "${SCRATCH_DIR}"

# create an initial disk image (128 MB)
echo "Creating initial disk image..."
hdiutil create -ov -scrub -size 128m -fs HFS+ -volname "${VOLUME_NAME}" "${DMG_TEMP_NAME}.dmg"
    
# mount the dmg
echo "Mounting initial disk image..."
hdiutil attach ${DMG_TEMP_NAME}.dmg

# create directory
echo "DMG_DIR is ${DMG_DIR}"
#mkdir -pv "${DMG_DIR}"
pushd "/Volumes/${VOLUME_NAME}"
mkdir "${SDK_DIR_NAME}"
popd

# copy READ ME to dmg (we use PBXCP to copy the rtfd)
echo "Copying ${READ_ME_FILE} to disk image..."
${PBXCP} \
	-exclude .DS_Store \
	-exclude CVS \
	-exclude .svn \
	-resolve-src-symlinks \
	"${READ_ME_FILE}" "${DMG_DIR}"

# set READ ME's extension to be hidden
echo "Setting ${READ_ME_RTF} extension to be hidden..."
/Developer/Tools/SetFile -a E "${DMG_DIR}/${READ_ME_RTF}"
	
# copy License to dmg (we use PBXCP to copy the rtfd)
echo "Copying ${LICENSE_FILE} to disk image..."
${PBXCP} \
	-exclude .DS_Store \
	-exclude CVS \
	-exclude .svn \
	-resolve-src-symlinks \
	"${LICENSE_FILE}" "${DMG_DIR}"

# set License's extension to be hidden
echo "Setting ${LICENSE_RTF} extension to be hidden..."
/Developer/Tools/SetFile -a E "${DMG_DIR}/${LICENSE_RTF}"

# add Sparky .webloc file to dmg
SPARKY_WEBLOC_PATH="${DMG_DIR}/Check for Updates.webloc"

echo '<?xml version="1.0" encoding="UTF-8"?>' > "$SPARKY_WEBLOC_PATH"
echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> "$SPARKY_WEBLOC_PATH"
echo '<plist version="1.0">' >> "$SPARKY_WEBLOC_PATH"
echo '<dict>' >> "$SPARKY_WEBLOC_PATH"
echo '    <key>URL</key>' >> "$SPARKY_WEBLOC_PATH"
echo "    <string>http://launch.karelia.com/changelog.php?rn=1&amp;version=${SVN_VERSION}&amp;product=5&amp;check=1</string>" >> "$SPARKY_WEBLOC_PATH"
echo '</dict>' >> "$SPARKY_WEBLOC_PATH"
echo '</plist>' >> "$SPARKY_WEBLOC_PATH"

# add Docs .webloc file to dmg
DOCS_WEBLOC_PATH="${DMG_DIR}/Sandvox Developers Guide.webloc"

echo '<?xml version="1.0" encoding="UTF-8"?>' > "$DOCS_WEBLOC_PATH"
echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> "$DOCS_WEBLOC_PATH"
echo '<plist version="1.0">' >> "$DOCS_WEBLOC_PATH"
echo '<dict>' >> "$DOCS_WEBLOC_PATH"
echo '    <key>URL</key>' >> "$DOCS_WEBLOC_PATH"
echo "    <string>http://wiki2.karelia.com/Sandvox_Developers_Guide</string>" >> "$DOCS_WEBLOC_PATH"
echo '</dict>' >> "$DOCS_WEBLOC_PATH"
echo '</plist>' >> "$DOCS_WEBLOC_PATH"

# copy Plugins to dmg
echo "Copying Plugins marked BUNDLED_SDK..."

mkdir -p "${DMG_DIR}/Elements"
mkdir -p "${DMG_DIR}/Indexes"

pushd "${PLUGINS_DIR}/Elements"
for i in *
do
	if [ -e "${i}/BUNDLED_SDK" ];
    	then
        	# copy to DMG 
        	echo "PLUGIN: PBXCp \"$i\" ${DMG_DIR}/Elements"

        	${PBXCP} \
			-exclude .DS_Store \
			-exclude CVS \
			-exclude .svn \
			-exclude *.pbxuser \
	        -exclude *.perspective* \
			-exclude BUNDLED_SDK \
			-resolve-src-symlinks \
			"${PWD}/${i}" "${DMG_DIR}/Elements"

		/usr/bin/gcc -E -P -x c -Wno-trigraphs \
			-D SANDVOX_VERSION=${SANDVOX_VERSION} \
			-D SVN_VERSION=${SVN_VERSION} \
			-C "${PWD}/${i}/Info.plist" \
			-o "${DMG_DIR}/Elements/${i}/Info.plist"

   	else
        	echo "--------------  Not including $i"
    	fi
done
popd

pushd "${PLUGINS_DIR}/Indexes"
for i in *
do
	if [ -e "${i}/BUNDLED_SDK" ];
    	then
        	# copy to DMG 
        	echo "PLUGIN: PBXCp \"$i\" ${DMG_DIR}/Indexes"

        	${PBXCP} \
			-exclude .DS_Store \
			-exclude CVS \
			-exclude .svn \
			-exclude *.pbxuser \
	        -exclude *.perspective* \
			-exclude BUNDLED_SDK \
			-resolve-src-symlinks \
			"${PWD}/${i}" "${DMG_DIR}/Indexes"

		/usr/bin/gcc -E -P -x c -Wno-trigraphs \
			-D SANDVOX_VERSION=${SANDVOX_VERSION} \
			-D SVN_VERSION=${SVN_VERSION} \
			-C "${PWD}/${i}/Info.plist" \
			-o "${DMG_DIR}/Indexes/${i}/Info.plist"

   	else
        	echo "--------------  Not including $i"
    	fi
done
popd

# copy Xcode templates to dmg
mkdir -p "${DMG_DIR}/Xcode"

pushd "${XCODE_DIR}"
echo "Copying Xcode stuff..."
	${PBXCP} \
		-exclude .DS_Store \
		-exclude CVS \
		-exclude .svn \
		-exclude *.pbxuser \
		-exclude *.perspective* \
		-resolve-src-symlinks \
		"${PWD}/Project Templates" "${DMG_DIR}/Xcode"
popd

# obtain device information
echo "Gathering device information..."
DEVS=$(hdiutil attach "${DMG_TEMP_NAME}.dmg" | cut -f 1)
DEV=$(echo $DEVS | cut -f 1 -d ' ')

# unmount the dmg
echo "Unmounting initial disk image..."
hdiutil detach "$DEV"

# compress and convert to read-only
# NB: UDZO = zlib-compressed image, compatible back to OS X 10.1
echo "Converting disk image to read-only..."
hdiutil convert "${DMG_TEMP_NAME}.dmg" -format UDZO -o "${DMG_FINAL_NAME}.dmg"
rm "${DMG_TEMP_NAME}.dmg"
    
# mark as "Internet-enabled"
echo "Marking disk image as internet-enabled..."
hdiutil internet-enable -yes "${DMG_FINAL_NAME}.dmg"

# install license agreement (there isn't one for bonus designs as of 11/6/2007)
echo "Installing License Agreement..."
hdiutil unflatten ${DMG_FINAL_NAME}.dmg
/Developer/Tools/DeRez ${SLA_FILE} > sla.r
/Developer/Tools/Rez -a sla.r -o ${DMG_FINAL_NAME}.dmg
hdiutil flatten ${DMG_FINAL_NAME}.dmg
rm sla.r

popd
echo "Packaging Complete!"
echo ""
echo "Your Sandvox Plugin SDK is waiting for you at ${SCRATCH_DIR}/${DMG_FINAL_NAME}.dmg."
echo ""

exit 0
