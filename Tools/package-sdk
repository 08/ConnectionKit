#!/bin/bash

# we base the PackageAndDeploySDK target on Sandvox.xcconfig through the Xcode UI
# this brings in SVN_VERSION and PRODUCT_VARIANT

echo ""
echo "Gathering resources for packaging Sandvox SDK ..."
echo "SVN_VERSION is ${SVN_VERSION}"
echo "PRODUCT_VARIANT is ${PRODUCT_VARIANT}"

if [ "${SVN_VERSION}" == "" ]
then
	echo ""
	echo "No SVN_VERSION. Cannot deploy. Exiting..."
	exit 1
fi

# the script phase itself brings in APPNAME (should be SandvoxSDK)
echo "APPNAME is ${APPNAME}"

APPNAMENOSPACES=`echo "$APPNAME" | sed 's/ //g'`
APPNAMELOWER=`echo "$APPNAMENOSPACES" | tr '[A-Z]' '[a-z]'`

PBXCP="${SRCROOT}/../../Shared/Tools/pbxcp"

SDK_DIR="${SRCROOT}/../SDK"
PLUGINS_DIR="${SRCROOT}/../PlugIns"

# ------------------------------------------------

# determine which SLA to use
# determine the name of the dmg to upload and where to upload it

SLA_FILE="UNKNOWN_DUDE"
VARIANTLOWER=`echo "${PRODUCT_VARIANT}" | tr '[A-Z]' '[a-z]'`

if [ ${VARIANTLOWER} == "beta" ]
	then
		SLA_FILE="${SRCROOT}/../Other/SLAs-beta/SLA-SDK.rtf"
		echo "this is the beta variant ${SLA_FILE}"
	    VARIANTTAG="-beta"
elif [ ${VARIANTLOWER} == "alpha" ]
    then
	    SLA_FILE="${SRCROOT}/../Other/SLAs-beta/SLA-SDK.rtf"
	    echo "this is the beta variant ${SLA_FILE} -- using since it's close enough for alpha"
        VARIANTTAG="-alpha"
	else
		SLA_FILE="${SRCROOT}/../Other/SLAs/SLA-SDK.rtf"
		echo "this is the release variant"
        VARIANTTAG=""
fi
echo "SLA file =  ${SLA_FILE}"

# ------------------------------------------------

# compute file names
# the dmg names that we'll use
VOLUME_NAME="${APPNAMENOSPACES}"
DMG_TEMP_NAME="temp"
DMG_FINAL_NAME="_${APPNAMENOSPACES}${VARIANTTAG}-${SVN_VERSION}"

# the directory that will appear on ~/Desktop after download
SDK_DIR_NAME="${APPNAME}"

# the directory within the mounted .dmg we'll copy to
DMG_DIR="/Volumes/${VOLUME_NAME}/${SDK_DIR_NAME}"

# the directory we'll do our work in
SCRATCH_DIR="/private/tmp/build-${APPNAMELOWER}-dmg"

if test -d ${SCRATCH_DIR}
then
	echo "Removing old scratch directory..."
	rm -rf ${SCRATCH_DIR}
fi
mkdir -p ${SCRATCH_DIR}

echo "Packaging ${APPNAME}..."
pushd ${SCRATCH_DIR}

# ------------------------------------------------
echo "SDK_DIR = ${SDK_DIR}"
echo "PLUGINS_DIR = ${PLUGINS_DIR}"
echo "APPNAMENOSPACES = ${APPNAMENOSPACES}"
echo "APPNAMELOWER = ${APPNAMELOWER}"
echo "SLA_FILE = ${SLA_FILE}"
echo "VARIANTLOWER = ${VARIANTLOWER}"
echo "VARIANTTAG = ${VARIANTTAG}"
echo "SLA file =  ${SLA_FILE}"
echo "VOLUME_NAME = ${VOLUME_NAME}"
echo "DMG_TEMP_NAME = ${DMG_TEMP_NAME}"
echo "DMG_FINAL_NAME = ${DMG_FINAL_NAME}"
echo "SDK_DIR_NAME = ${SDK_DIR_NAME}"
echo "DMG_DIR = ${DMG_DIR}"
echo "SCRATCH_DIR = ${SCRATCH_DIR}"
# ------------------------------------------------

# .dmg creation
# create an initial disk image (128 MB)
echo "Creating initial disk image..."
hdiutil create -ov -scrub -size 128m -fs HFS+ -volname "${VOLUME_NAME}" "${DMG_TEMP_NAME}.dmg"
    
# mount the dmg
echo "Mounting initial disk image..."
hdiutil attach ${DMG_TEMP_NAME}.dmg

# create directory on dmg to hold sdk
echo "DMG_DIR is ${DMG_DIR}"
pushd "/Volumes/${VOLUME_NAME}"
mkdir "${SDK_DIR_NAME}"
popd

# ------------------------------------------------

# copy READ ME from SDK to dmg
READ_ME_RTF="READ ME.rtf"
READ_ME_FILE="${SDK_DIR}/${READ_ME_RTF}"
echo "Copying ${READ_ME_FILE} to disk image..."
${PBXCP} \
	-resolve-src-symlinks \
	"${READ_ME_FILE}" "${DMG_DIR}"

# set READ ME's extension to be hidden
READ_ME_RTF="READ ME.rtf"
echo "Setting ${READ_ME_RTF} extension to be hidden..."
/Developer/Tools/SetFile -a E "${DMG_DIR}/${READ_ME_RTF}"

# copy License from PlugIns to dmg
LICENSE_RTF="License.rtf"
LICENSE_FILE="${PLUGINS_DIR}/${LICENSE_RTF}"
echo "Copying ${LICENSE_FILE} to disk image..."
${PBXCP} \
	-resolve-src-symlinks \
	"${LICENSE_FILE}" "${DMG_DIR}"

# set License's extension to be hidden
echo "Setting ${LICENSE_RTF} extension to be hidden..."
/Developer/Tools/SetFile -a E "${DMG_DIR}/${LICENSE_RTF}"

#### add Sparky .webloc file to dmg
###SPARKY_WEBLOC_PATH="${DMG_DIR}/Check for Updates.webloc"

###echo '<?xml version="1.0" encoding="UTF-8"?>' > "$SPARKY_WEBLOC_PATH"
###echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> "$SPARKY_WEBLOC_PATH"
###echo '<plist version="1.0">' >> "$SPARKY_WEBLOC_PATH"
###echo '<dict>' >> "$SPARKY_WEBLOC_PATH"
###echo '    <key>URL</key>' >> "$SPARKY_WEBLOC_PATH"
###echo "    <string>http://launch.karelia.com/changelog.php?rn=1&amp;version=${SVN_VERSION}&amp;product=5&amp;check=1</string>" >> "$SPARKY_WEBLOC_PATH"
###echo '</dict>' >> "$SPARKY_WEBLOC_PATH"
###echo '</plist>' >> "$SPARKY_WEBLOC_PATH"

# add Docs .webloc file to dmg
DOCS_WEBLOC_PATH="${DMG_DIR}/Developers Guide.webloc"

echo '<?xml version="1.0" encoding="UTF-8"?>' > "$DOCS_WEBLOC_PATH"
echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> "$DOCS_WEBLOC_PATH"
echo '<plist version="1.0">' >> "$DOCS_WEBLOC_PATH"
echo '<dict>' >> "$DOCS_WEBLOC_PATH"
echo '    <key>URL</key>' >> "$DOCS_WEBLOC_PATH"
echo "    <string>http://wiki2.karelia.com/Sandvox_Developers_Guide</string>" >> "$DOCS_WEBLOC_PATH"
echo '</dict>' >> "$DOCS_WEBLOC_PATH"
echo '</plist>' >> "$DOCS_WEBLOC_PATH"

# add Forum .webloc file to dmg
FORUM_WEBLOC_PATH="${DMG_DIR}/Developers Forum.webloc"

echo '<?xml version="1.0" encoding="UTF-8"?>' > "$FORUM_WEBLOC_PATH"
echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> "$FORUM_WEBLOC_PATH"
echo '<plist version="1.0">' >> "$FORUM_WEBLOC_PATH"
echo '<dict>' >> "$FORUM_WEBLOC_PATH"
echo '    <key>URL</key>' >> "$FORUM_WEBLOC_PATH"
echo "    <string>http://support.karelia.com/?sandvox-dev</string>" >> "$FORUM_WEBLOC_PATH"
echo '</dict>' >> "$FORUM_WEBLOC_PATH"
echo '</plist>' >> "$FORUM_WEBLOC_PATH"

# copy Examples to dmg
EXAMPLES_DIR="${SDK_DIR}/Examples"
echo "Copying ${EXAMPLES_DIR} to disk image..."
mkdir -p "${DMG_DIR}/Examples"
pushd "${EXAMPLES_DIR}"
for i in *
do
	if [ -e "${i}/BUNDLED_SDK" ];
    	then
        	# copy to DMG 
        	echo "PLUGIN: PBXCp \"$i\" ${DMG_DIR}/Examples"

        	${PBXCP} \
			-exclude .DS_Store \
			-exclude CVS \
			-exclude .svn \
			-exclude *.pbxuser \
	        -exclude *.perspective* \
			-exclude BUNDLED_SDK \
			-resolve-src-symlinks \
			"${PWD}/${i}" "${DMG_DIR}/Examples"

###		/usr/bin/gcc -E -P -x c -Wno-trigraphs \
###			-D SANDVOX_VERSION=${SANDVOX_VERSION} \
###			-D SVN_VERSION=${SVN_VERSION} \
###			-C "${PWD}/${i}/Info.plist" \
###			-o "${DMG_DIR}/Examples/${i}/Info.plist"

   	else
        	echo "--------------  Not including $i"
    	fi
done
popd

# ------------------------------------------------

# clean up .dmg
# obtain device information
echo "Gathering device information..."
DEVS=$(hdiutil attach "${DMG_TEMP_NAME}.dmg" | cut -f 1)
DEV=$(echo $DEVS | cut -f 1 -d ' ')

# unmount the dmg
echo "Unmounting initial disk image..."
hdiutil detach "$DEV"

# compress and convert to read-only
# NB: UDZO = zlib-compressed image, compatible back to OS X 10.1
echo "Converting disk image to read-only..."
hdiutil convert "${DMG_TEMP_NAME}.dmg" -format UDZO -o "${DMG_FINAL_NAME}.dmg"
rm "${DMG_TEMP_NAME}.dmg"
    
# mark as "Internet-enabled"
echo "Marking disk image as internet-enabled..."
hdiutil internet-enable -yes "${DMG_FINAL_NAME}.dmg"

# install license agreement
echo "Installing License Agreement..."
hdiutil unflatten ${DMG_FINAL_NAME}.dmg
${SRCROOT}/../../Shared/Tools/RichTextToResource ${SLA_FILE} > sla.r
/Developer/Tools/Rez ${SRCROOT}/../Other/for_SLA.r sla.r -a -o ${DMG_FINAL_NAME}.dmg
hdiutil flatten ${DMG_FINAL_NAME}.dmg

popd

echo "Packaging Complete!"
echo ""
echo "Your ${APPNAME}-SDK is waiting for you at ${SCRATCH_DIR}/${DMG_FINAL_NAME}.dmg."
echo ""


exit 0
